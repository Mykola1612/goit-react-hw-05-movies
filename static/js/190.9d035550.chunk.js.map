{"version":3,"file":"static/js/190.9d035550.chunk.js","mappings":"8MAEAA,EAAAA,EAAAA,SAAAA,QAAA,gCACAA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,SAAU,QACVC,KAAM,EACNC,QAAS,oCAEJ,IAAMC,EAAK,mCAAG,WAAMC,GAAN,kGAEML,EAAAA,EAAAA,IAAUK,GAAOA,EAAIC,SAAU,CACpDC,OAAQP,EAAAA,EAAAA,SAAAA,SAHO,uBAETQ,EAFS,EAETA,KAFS,kBAKVA,GALU,sCAOX,IAAIC,MAAM,iJAAV,MAPW,yDAAH,qD,kFCKlB,EAVsB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACxC,OACE,yBACE,SAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMF,GAAYG,GAAE,kBAAaN,GAAhD,SACGC,GAASC,KAFLF,EAMZ,ECSD,EAjBkB,SAAC,GAAyB,IAAvBO,EAAsB,EAAtBA,MAAOJ,EAAe,EAAfA,SAC1B,OACE,wBACoB,IAAjBI,EAAMC,QACLD,EAAME,KAAI,SAAAC,GAAU,OAClB,SAAC,EAAD,CAEEV,GAAIU,EAAWV,GACfC,MAAOS,EAAWT,MAClBC,KAAMQ,EAAWR,KACjBC,SAAUA,GAJLO,EAAWV,GAFA,KAW3B,C,wJCFD,EAde,SAAC,GAAsB,IAApBW,EAAmB,EAAnBA,aAMhB,OACE,kBAAMC,OAAO,SAASC,SANC,SAAAC,GACvBA,EAAEC,iBACF,IAAMC,EAAQF,EAAEG,cAAcC,SAASC,YAAYH,MACnDL,EAAaK,EACd,EAEC,WACE,kBAAOI,KAAK,OAAOlB,KAAK,iBACxB,4BAAQ,aAGb,E,iBCuCD,EA9CmB,WACjB,OAAsCmB,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAaF,EAAaG,IAAI,SAE9B3B,GAAW4B,EAAAA,EAAAA,MA8BjB,OAnBAC,EAAAA,EAAAA,YAAU,WACR,GAAKH,EAAL,CAGA,IAAMI,EAAO,mCAAG,oGAEZR,GAAU,GAFE,UAGO/B,EAAAA,EAAAA,GAAM,sBAAD,OACAmC,EADA,yBAHZ,OAGN/B,EAHM,OAMZyB,EAAezB,EAAKoC,SANR,yEASZT,GAAU,GATE,4EAAH,qDAYbQ,GAbC,CAcF,GAAE,CAACJ,KAGF,2BACGL,IAAU,SAACW,EAAA,EAAD,KACX,SAAC,EAAD,CAAQxB,aA/BS,SAAAyB,GACnB,GAAoB,KAAhBA,EAGF,OAFAR,EAAgB,CAAC,QACjBL,EAAe,IAGjBK,EAAgB,CAAES,MAAOD,GAC1B,KAyBG,SAACE,EAAA,EAAD,CAAW/B,MAAOe,EAAanB,SAAUA,MAG9C,C","sources":["components/Fetch/fetch.jsx","components/FilmsListItem/FilmsListItem.jsx","components/FilmsList/FilmsList.jsx","components/Search/Search.jsx","pages/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\naxios.defaults.params = {\n  language: 'en-US',\n  page: 1,\n  api_key: 'c2d5ae1916124f8e18d2a212d8e4ab11',\n};\nexport const fetch = async url => {\n  try {\n    const { data } = await axios.get(url || url.pathname, {\n      params: axios.defaults.params,\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Ошибка при загрузке данных:', error);\n  }\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst FilmsListItem = ({ id, title, name, location }) => {\n  return (\n    <li key={id}>\n      <Link state={{ from: location }} to={`/movies/${id}`}>\n        {title || name}\n      </Link>\n    </li>\n  );\n};\n\nexport default FilmsListItem;\n","import FilmsListItem from 'components/FilmsListItem/FilmsListItem';\nimport React from 'react';\n\nconst FilmsList = ({ films, location }) => {\n  return (\n    <ul>\n      {films.length !== 0 &&\n        films.map(searchFilm => (\n          <FilmsListItem\n            key={searchFilm.id}\n            id={searchFilm.id}\n            title={searchFilm.title}\n            name={searchFilm.name}\n            location={location}\n          />\n        ))}\n    </ul>\n  );\n};\n\nexport default FilmsList;\n","import React from 'react';\n\nconst Search = ({ handleSubmit }) => {\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    const value = e.currentTarget.elements.inputParams.value;\n    handleSubmit(value);\n  };\n  return (\n    <form action=\"submit\" onSubmit={handleSubmitForm}>\n      <input type=\"text\" name=\"inputParams\" />\n      <button>Search</button>\n    </form>\n  );\n};\n\nexport default Search;\n","import { fetch } from 'components/Fetch/fetch';\nimport FilmsList from 'components/FilmsList/FilmsList';\nimport { Loader } from 'components/Loader';\nimport Search from 'components/Search/Search';\nimport { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\n\nconst MoviesPage = () => {\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [loader, setLoader] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const queryValue = searchParams.get('query');\n\n  const location = useLocation();\n\n  const handleSubmit = searchValue => {\n    if (searchValue === '') {\n      setSearchParams({});\n      setSearchFilms([]);\n      return;\n    }\n    setSearchParams({ query: searchValue });\n  };\n\n  useEffect(() => {\n    if (!queryValue) {\n      return;\n    }\n    const fetchFn = async () => {\n      try {\n        setLoader(true);\n        const data = await fetch(\n          `search/movie?query=${queryValue}&include_adult=false`\n        );\n        setSearchFilms(data.results);\n      } catch (error) {\n      } finally {\n        setLoader(false);\n      }\n    };\n    fetchFn();\n  }, [queryValue]);\n\n  return (\n    <div>\n      {loader && <Loader />}\n      <Search handleSubmit={handleSubmit} />\n      <FilmsList films={searchFilms} location={location} />\n    </div>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["axios","language","page","api_key","fetch","url","pathname","params","data","Error","id","title","name","location","state","from","to","films","length","map","searchFilm","handleSubmit","action","onSubmit","e","preventDefault","value","currentTarget","elements","inputParams","type","useState","searchFilms","setSearchFilms","loader","setLoader","useSearchParams","searchParams","setSearchParams","queryValue","get","useLocation","useEffect","fetchFn","results","Loader","searchValue","query","FilmsList"],"sourceRoot":""}